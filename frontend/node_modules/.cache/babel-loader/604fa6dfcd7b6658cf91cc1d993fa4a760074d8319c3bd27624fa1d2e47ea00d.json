{"ast":null,"code":"var _jsxFileName = \"/Users/joeykang/Documents/GitHub/Team-Pesto/frontend/src/components/wellness_history.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WellnessHistory = () => {\n  _s();\n  const [moods, setMoods] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    const token = localStorage.getItem('access_token'); // Retrieve the token from local storage\n    if (!token) {\n      setErrorMessage(\"Unauthorized: No token found\");\n      return;\n    }\n    axios.get('http://localhost:8000/moods/latest_week/', {\n      // Fetch latest moods for the past week\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      console.log('Fetched moods:', response.data); // Log the fetched data\n      setMoods(response.data);\n    }).catch(error => {\n      if (error.response && error.response.status === 401) {\n        setErrorMessage(\"Unauthorized: Invalid token\");\n      } else {\n        setErrorMessage(\"Error fetching moods\");\n      }\n      console.error('There was an error fetching the moods!', error);\n    });\n  }, []);\n  const fetchLatestMoodForDay = day => {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      setErrorMessage(\"Unauthorized: No token found\");\n      return;\n    }\n    axios.get(`http://localhost:8000/moods/latest/?day=${day}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      console.log('Fetched mood for the day:', response.data); // Log the fetched data\n      if (response.data.id === 0) {\n        setErrorMessage(\"No mood found for this day\");\n        // Clear the graph data\n        setMoods([]);\n      } else {\n        setErrorMessage(\"\"); // Clear any previous error messages\n        // Update the state with the fetched mood\n        setMoods(prevMoods => {\n          const updatedMoods = prevMoods.map(mood => {\n            if (new Date(mood.timestamp).toISOString().split('T')[0] === day) {\n              return response.data;\n            }\n            return mood;\n          });\n          return updatedMoods;\n        });\n      }\n    }).catch(error => {\n      if (error.response && error.response.status === 401) {\n        setErrorMessage(\"Unauthorized: Invalid token\");\n      } else {\n        setErrorMessage(\"Error fetching latest mood for the day\");\n      }\n      console.error('There was an error fetching the latest mood for the day!', error);\n    });\n  };\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const happinessCounts = daysOfWeek.map((day, index) => {\n    const mood = moods.find(mood => new Date(mood.timestamp).getDay() === index);\n    console.log(`Mood for ${day}:`, mood); // Log the mood for each day\n    return mood ? mood.mood : 0; // Default to 0 if no mood is found for the day\n  });\n  const data = {\n    labels: daysOfWeek,\n    datasets: [{\n      label: 'Happiness Level',\n      data: happinessCounts,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n      pointBorderColor: 'rgba(54, 162, 235, 1)',\n      pointRadius: 5,\n      fill: false\n    }]\n  };\n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        min: 1,\n        // Set minimum of y-axis to 1\n        max: 5,\n        // Set maximum of y-axis to 5\n        ticks: {\n          stepSize: 1 // Increment by 1 for each tick\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"intro\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wellness History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Take a look at your progress!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"This Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        const day = e.target.elements.wellness.value;\n        fetchLatestMoodForDay(day);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Past Weeks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"wellness\",\n        children: \"Select Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"wellness\",\n        name: \"wellness\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(WellnessHistory, \"+Rg8rW2b20/UG9glhYFKHnXWr/c=\");\n_c = WellnessHistory;\nexport default WellnessHistory;\nvar _c;\n$RefreshReg$(_c, \"WellnessHistory\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","jsxDEV","_jsxDEV","WellnessHistory","_s","moods","setMoods","errorMessage","setErrorMessage","token","localStorage","getItem","get","headers","Authorization","then","response","console","log","data","catch","error","status","fetchLatestMoodForDay","day","id","prevMoods","updatedMoods","map","mood","Date","timestamp","toISOString","split","daysOfWeek","happinessCounts","index","find","getDay","labels","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","pointRadius","fill","options","scales","y","beginAtZero","min","max","ticks","stepSize","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","target","elements","wellness","value","htmlFor","type","name","_c","$RefreshReg$"],"sources":["/Users/joeykang/Documents/GitHub/Team-Pesto/frontend/src/components/wellness_history.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\nconst WellnessHistory = () => {\n  const [moods, setMoods] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    const token = localStorage.getItem('access_token'); // Retrieve the token from local storage\n    if (!token) {\n      setErrorMessage(\"Unauthorized: No token found\");\n      return;\n    }\n\n    axios.get('http://localhost:8000/moods/latest_week/', { // Fetch latest moods for the past week\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n    .then(response => {\n      console.log('Fetched moods:', response.data); // Log the fetched data\n      setMoods(response.data);\n    })\n    .catch(error => {\n      if (error.response && error.response.status === 401) {\n        setErrorMessage(\"Unauthorized: Invalid token\");\n      } else {\n        setErrorMessage(\"Error fetching moods\");\n      }\n      console.error('There was an error fetching the moods!', error);\n    });\n  }, []);\n\n  const fetchLatestMoodForDay = (day) => {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      setErrorMessage(\"Unauthorized: No token found\");\n      return;\n    }\n\n    axios.get(`http://localhost:8000/moods/latest/?day=${day}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n    .then(response => {\n      console.log('Fetched mood for the day:', response.data); // Log the fetched data\n      if (response.data.id === 0) {\n        setErrorMessage(\"No mood found for this day\");\n        // Clear the graph data\n        setMoods([]);\n      } else {\n        setErrorMessage(\"\"); // Clear any previous error messages\n        // Update the state with the fetched mood\n        setMoods(prevMoods => {\n          const updatedMoods = prevMoods.map(mood => {\n            if (new Date(mood.timestamp).toISOString().split('T')[0] === day) {\n              return response.data;\n            }\n            return mood;\n          });\n          return updatedMoods;\n        });\n      }\n    })\n    .catch(error => {\n      if (error.response && error.response.status === 401) {\n        setErrorMessage(\"Unauthorized: Invalid token\");\n      } else {\n        setErrorMessage(\"Error fetching latest mood for the day\");\n      }\n      console.error('There was an error fetching the latest mood for the day!', error);\n    });\n  };\n\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const happinessCounts = daysOfWeek.map((day, index) => {\n    const mood = moods.find(mood => new Date(mood.timestamp).getDay() === index);\n    console.log(`Mood for ${day}:`, mood); // Log the mood for each day\n    return mood ? mood.mood : 0; // Default to 0 if no mood is found for the day\n  });\n\n  const data = {\n    labels: daysOfWeek,\n    datasets: [{\n      label: 'Happiness Level',\n      data: happinessCounts,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n      pointBorderColor: 'rgba(54, 162, 235, 1)',\n      pointRadius: 5,\n      fill: false\n    }]\n  };\n\n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        min: 1, // Set minimum of y-axis to 1\n        max: 5, // Set maximum of y-axis to 5\n        ticks: {\n          stepSize: 1 // Increment by 1 for each tick\n        }\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"intro\">\n        <h1>Wellness History</h1>\n        <p>Take a look at your progress!</p>\n        <h2>This Week</h2>\n      </div>\n      <Line data={data} options={options} />\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        const day = e.target.elements.wellness.value;\n        fetchLatestMoodForDay(day);\n      }}>\n        <h2>Past Weeks</h2>\n        <label htmlFor=\"wellness\">Select Date:</label>\n        <input type=\"date\" id=\"wellness\" name=\"wellness\" />\n        <input type=\"submit\" />\n      </form>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n    </div>\n  );\n};\n\nexport default WellnessHistory;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;IACpD,IAAI,CAACF,KAAK,EAAE;MACVD,eAAe,CAAC,8BAA8B,CAAC;MAC/C;IACF;IAEAT,KAAK,CAACa,GAAG,CAAC,0CAA0C,EAAE;MAAE;MACtDC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUL,KAAK;MAChC;IACF,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAI;MAChBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MAC9Cb,QAAQ,CAACU,QAAQ,CAACG,IAAI,CAAC;IACzB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACd,IAAIA,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAACL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;QACnDd,eAAe,CAAC,6BAA6B,CAAC;MAChD,CAAC,MAAM;QACLA,eAAe,CAAC,sBAAsB,CAAC;MACzC;MACAS,OAAO,CAACI,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,qBAAqB,GAAIC,GAAG,IAAK;IACrC,MAAMf,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAClD,IAAI,CAACF,KAAK,EAAE;MACVD,eAAe,CAAC,8BAA8B,CAAC;MAC/C;IACF;IAEAT,KAAK,CAACa,GAAG,CAAC,2CAA2CY,GAAG,EAAE,EAAE;MAC1DX,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUL,KAAK;MAChC;IACF,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAI;MAChBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MACzD,IAAIH,QAAQ,CAACG,IAAI,CAACM,EAAE,KAAK,CAAC,EAAE;QAC1BjB,eAAe,CAAC,4BAA4B,CAAC;QAC7C;QACAF,QAAQ,CAAC,EAAE,CAAC;MACd,CAAC,MAAM;QACLE,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;QACrB;QACAF,QAAQ,CAACoB,SAAS,IAAI;UACpB,MAAMC,YAAY,GAAGD,SAAS,CAACE,GAAG,CAACC,IAAI,IAAI;YACzC,IAAI,IAAIC,IAAI,CAACD,IAAI,CAACE,SAAS,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKT,GAAG,EAAE;cAChE,OAAOR,QAAQ,CAACG,IAAI;YACtB;YACA,OAAOU,IAAI;UACb,CAAC,CAAC;UACF,OAAOF,YAAY;QACrB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,CACDP,KAAK,CAACC,KAAK,IAAI;MACd,IAAIA,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAACL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;QACnDd,eAAe,CAAC,6BAA6B,CAAC;MAChD,CAAC,MAAM;QACLA,eAAe,CAAC,wCAAwC,CAAC;MAC3D;MACAS,OAAO,CAACI,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC;IAClF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMa,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EACpE,MAAMC,eAAe,GAAGD,UAAU,CAACN,GAAG,CAAC,CAACJ,GAAG,EAAEY,KAAK,KAAK;IACrD,MAAMP,IAAI,GAAGxB,KAAK,CAACgC,IAAI,CAACR,IAAI,IAAI,IAAIC,IAAI,CAACD,IAAI,CAACE,SAAS,CAAC,CAACO,MAAM,CAAC,CAAC,KAAKF,KAAK,CAAC;IAC5EnB,OAAO,CAACC,GAAG,CAAC,YAAYM,GAAG,GAAG,EAAEK,IAAI,CAAC,CAAC,CAAC;IACvC,OAAOA,IAAI,GAAGA,IAAI,CAACA,IAAI,GAAG,CAAC,CAAC,CAAC;EAC/B,CAAC,CAAC;EAEF,MAAMV,IAAI,GAAG;IACXoB,MAAM,EAAEL,UAAU;IAClBM,QAAQ,EAAE,CAAC;MACTC,KAAK,EAAE,iBAAiB;MACxBtB,IAAI,EAAEgB,eAAe;MACrBO,WAAW,EAAE,uBAAuB;MACpCC,eAAe,EAAE,yBAAyB;MAC1CC,oBAAoB,EAAE,uBAAuB;MAC7CC,gBAAgB,EAAE,uBAAuB;MACzCC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC;EACH,CAAC;EAED,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,WAAW,EAAE,IAAI;QACjBC,GAAG,EAAE,CAAC;QAAE;QACRC,GAAG,EAAE,CAAC;QAAE;QACRC,KAAK,EAAE;UACLC,QAAQ,EAAE,CAAC,CAAC;QACd;MACF;IACF;EACF,CAAC;EAED,oBACErD,OAAA;IAAAsD,QAAA,gBACEtD,OAAA;MAAKuD,SAAS,EAAC,OAAO;MAAAD,QAAA,gBACpBtD,OAAA;QAAAsD,QAAA,EAAI;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzB3D,OAAA;QAAAsD,QAAA,EAAG;MAA6B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpC3D,OAAA;QAAAsD,QAAA,EAAI;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC,eACN3D,OAAA,CAACF,IAAI;MAACmB,IAAI,EAAEA,IAAK;MAAC6B,OAAO,EAAEA;IAAQ;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtC3D,OAAA;MAAM4D,QAAQ,EAAGC,CAAC,IAAK;QACrBA,CAAC,CAACC,cAAc,CAAC,CAAC;QAClB,MAAMxC,GAAG,GAAGuC,CAAC,CAACE,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,KAAK;QAC5C7C,qBAAqB,CAACC,GAAG,CAAC;MAC5B,CAAE;MAAAgC,QAAA,gBACAtD,OAAA;QAAAsD,QAAA,EAAI;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnB3D,OAAA;QAAOmE,OAAO,EAAC,UAAU;QAAAb,QAAA,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC9C3D,OAAA;QAAOoE,IAAI,EAAC,MAAM;QAAC7C,EAAE,EAAC,UAAU;QAAC8C,IAAI,EAAC;MAAU;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnD3D,OAAA;QAAOoE,IAAI,EAAC;MAAQ;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,EACNtD,YAAY,iBAAIL,OAAA;MAAGuD,SAAS,EAAC,eAAe;MAAAD,QAAA,EAAEjD;IAAY;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV,CAAC;AAACzD,EAAA,CA/HID,eAAe;AAAAqE,EAAA,GAAfrE,eAAe;AAiIrB,eAAeA,eAAe;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}